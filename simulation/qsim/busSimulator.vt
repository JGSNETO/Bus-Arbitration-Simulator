// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/16/2022 20:46:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    busSimulator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module busSimulator_vlg_sample_tst(
	node_A,
	node_B,
	node_C,
	sampler_tx
);
input [12:0] node_A;
input [12:0] node_B;
input [12:0] node_C;
output sampler_tx;

reg sample;
time current_time;
always @(node_A or node_B or node_C)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module busSimulator_vlg_check_tst (
	OUTPUT,
	sampler_rx
);
input [12:0] OUTPUT;
input sampler_rx;

reg [12:0] OUTPUT_expected;

reg [12:0] OUTPUT_prev;

reg [12:0] OUTPUT_expected_prev;

reg [12:0] last_OUTPUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUTPUT_prev = OUTPUT;
end

// update expected /o prevs

always @(trigger)
begin
	OUTPUT_expected_prev = OUTPUT_expected;
end


// expected \OUTPUT [ 12 ]
initial
begin
	OUTPUT_expected[12] = 1'bX;
end 
// expected \OUTPUT [ 11 ]
initial
begin
	OUTPUT_expected[11] = 1'bX;
end 
// expected \OUTPUT [ 10 ]
initial
begin
	OUTPUT_expected[10] = 1'bX;
end 
// expected \OUTPUT [ 9 ]
initial
begin
	OUTPUT_expected[9] = 1'bX;
end 
// expected \OUTPUT [ 8 ]
initial
begin
	OUTPUT_expected[8] = 1'bX;
end 
// expected \OUTPUT [ 7 ]
initial
begin
	OUTPUT_expected[7] = 1'bX;
end 
// expected \OUTPUT [ 6 ]
initial
begin
	OUTPUT_expected[6] = 1'bX;
end 
// expected \OUTPUT [ 5 ]
initial
begin
	OUTPUT_expected[5] = 1'bX;
end 
// expected \OUTPUT [ 4 ]
initial
begin
	OUTPUT_expected[4] = 1'bX;
end 
// expected \OUTPUT [ 3 ]
initial
begin
	OUTPUT_expected[3] = 1'bX;
end 
// expected \OUTPUT [ 2 ]
initial
begin
	OUTPUT_expected[2] = 1'bX;
end 
// expected \OUTPUT [ 1 ]
initial
begin
	OUTPUT_expected[1] = 1'bX;
end 
// expected \OUTPUT [ 0 ]
initial
begin
	OUTPUT_expected[0] = 1'bX;
end 
// generate trigger
always @(OUTPUT_expected or OUTPUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUTPUT = %b | ",OUTPUT_expected_prev);
	$display("| real OUTPUT = %b | ",OUTPUT_prev);
`endif
	if (
		( OUTPUT_expected_prev[0] !== 1'bx ) && ( OUTPUT_prev[0] !== OUTPUT_expected_prev[0] )
		&& ((OUTPUT_expected_prev[0] !== last_OUTPUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[0] = OUTPUT_expected_prev[0];
	end
	if (
		( OUTPUT_expected_prev[1] !== 1'bx ) && ( OUTPUT_prev[1] !== OUTPUT_expected_prev[1] )
		&& ((OUTPUT_expected_prev[1] !== last_OUTPUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[1] = OUTPUT_expected_prev[1];
	end
	if (
		( OUTPUT_expected_prev[2] !== 1'bx ) && ( OUTPUT_prev[2] !== OUTPUT_expected_prev[2] )
		&& ((OUTPUT_expected_prev[2] !== last_OUTPUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[2] = OUTPUT_expected_prev[2];
	end
	if (
		( OUTPUT_expected_prev[3] !== 1'bx ) && ( OUTPUT_prev[3] !== OUTPUT_expected_prev[3] )
		&& ((OUTPUT_expected_prev[3] !== last_OUTPUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[3] = OUTPUT_expected_prev[3];
	end
	if (
		( OUTPUT_expected_prev[4] !== 1'bx ) && ( OUTPUT_prev[4] !== OUTPUT_expected_prev[4] )
		&& ((OUTPUT_expected_prev[4] !== last_OUTPUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[4] = OUTPUT_expected_prev[4];
	end
	if (
		( OUTPUT_expected_prev[5] !== 1'bx ) && ( OUTPUT_prev[5] !== OUTPUT_expected_prev[5] )
		&& ((OUTPUT_expected_prev[5] !== last_OUTPUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[5] = OUTPUT_expected_prev[5];
	end
	if (
		( OUTPUT_expected_prev[6] !== 1'bx ) && ( OUTPUT_prev[6] !== OUTPUT_expected_prev[6] )
		&& ((OUTPUT_expected_prev[6] !== last_OUTPUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[6] = OUTPUT_expected_prev[6];
	end
	if (
		( OUTPUT_expected_prev[7] !== 1'bx ) && ( OUTPUT_prev[7] !== OUTPUT_expected_prev[7] )
		&& ((OUTPUT_expected_prev[7] !== last_OUTPUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[7] = OUTPUT_expected_prev[7];
	end
	if (
		( OUTPUT_expected_prev[8] !== 1'bx ) && ( OUTPUT_prev[8] !== OUTPUT_expected_prev[8] )
		&& ((OUTPUT_expected_prev[8] !== last_OUTPUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[8] = OUTPUT_expected_prev[8];
	end
	if (
		( OUTPUT_expected_prev[9] !== 1'bx ) && ( OUTPUT_prev[9] !== OUTPUT_expected_prev[9] )
		&& ((OUTPUT_expected_prev[9] !== last_OUTPUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[9] = OUTPUT_expected_prev[9];
	end
	if (
		( OUTPUT_expected_prev[10] !== 1'bx ) && ( OUTPUT_prev[10] !== OUTPUT_expected_prev[10] )
		&& ((OUTPUT_expected_prev[10] !== last_OUTPUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[10] = OUTPUT_expected_prev[10];
	end
	if (
		( OUTPUT_expected_prev[11] !== 1'bx ) && ( OUTPUT_prev[11] !== OUTPUT_expected_prev[11] )
		&& ((OUTPUT_expected_prev[11] !== last_OUTPUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[11] = OUTPUT_expected_prev[11];
	end
	if (
		( OUTPUT_expected_prev[12] !== 1'bx ) && ( OUTPUT_prev[12] !== OUTPUT_expected_prev[12] )
		&& ((OUTPUT_expected_prev[12] !== last_OUTPUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[12] = OUTPUT_expected_prev[12];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module busSimulator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [12:0] node_A;
reg [12:0] node_B;
reg [12:0] node_C;
// wires                                               
wire [12:0] OUTPUT;

wire sampler;                             

// assign statements (if any)                          
busSimulator i1 (
// port map - connection between master ports and signals/registers   
	.node_A(node_A),
	.node_B(node_B),
	.node_C(node_C),
	.\OUTPUT (OUTPUT)
);
// node_A[ 12 ]
initial
begin
	node_A[12] = 1'b0;
end 
// node_A[ 11 ]
initial
begin
	node_A[11] = 1'b0;
	node_A[11] = #10000 1'b1;
	node_A[11] = #980000 1'b0;
end 
// node_A[ 10 ]
initial
begin
	node_A[10] = 1'b0;
	node_A[10] = #10000 1'b1;
	node_A[10] = #980000 1'b0;
end 
// node_A[ 9 ]
initial
begin
	node_A[9] = 1'b0;
end 
// node_A[ 8 ]
initial
begin
	node_A[8] = 1'b0;
end 
// node_A[ 7 ]
initial
begin
	node_A[7] = 1'b0;
	node_A[7] = #10000 1'b1;
	node_A[7] = #980000 1'b0;
end 
// node_A[ 6 ]
initial
begin
	node_A[6] = 1'b0;
end 
// node_A[ 5 ]
initial
begin
	node_A[5] = 1'b0;
	node_A[5] = #10000 1'b1;
	node_A[5] = #980000 1'b0;
end 
// node_A[ 4 ]
initial
begin
	node_A[4] = 1'b0;
end 
// node_A[ 3 ]
initial
begin
	node_A[3] = 1'b0;
end 
// node_A[ 2 ]
initial
begin
	node_A[2] = 1'b0;
end 
// node_A[ 1 ]
initial
begin
	node_A[1] = 1'b0;
	node_A[1] = #10000 1'b1;
	node_A[1] = #980000 1'b0;
end 
// node_A[ 0 ]
initial
begin
	node_A[0] = 1'b0;
end 
// node_B[ 12 ]
initial
begin
	node_B[12] = 1'b0;
end 
// node_B[ 11 ]
initial
begin
	node_B[11] = 1'b0;
end 
// node_B[ 10 ]
initial
begin
	node_B[10] = 1'b0;
	node_B[10] = #10000 1'b1;
	node_B[10] = #980000 1'b0;
end 
// node_B[ 9 ]
initial
begin
	node_B[9] = 1'b0;
end 
// node_B[ 8 ]
initial
begin
	node_B[8] = 1'b0;
	node_B[8] = #10000 1'b1;
	node_B[8] = #980000 1'b0;
end 
// node_B[ 7 ]
initial
begin
	node_B[7] = 1'b0;
end 
// node_B[ 6 ]
initial
begin
	node_B[6] = 1'b0;
end 
// node_B[ 5 ]
initial
begin
	node_B[5] = 1'b0;
	node_B[5] = #10000 1'b1;
	node_B[5] = #980000 1'b0;
end 
// node_B[ 4 ]
initial
begin
	node_B[4] = 1'b0;
end 
// node_B[ 3 ]
initial
begin
	node_B[3] = 1'b0;
end 
// node_B[ 2 ]
initial
begin
	node_B[2] = 1'b0;
	node_B[2] = #10000 1'b1;
	node_B[2] = #980000 1'b0;
end 
// node_B[ 1 ]
initial
begin
	node_B[1] = 1'b0;
end 
// node_B[ 0 ]
initial
begin
	node_B[0] = 1'b0;
end 
// node_C[ 12 ]
initial
begin
	node_C[12] = 1'b0;
end 
// node_C[ 11 ]
initial
begin
	node_C[11] = 1'b0;
	node_C[11] = #10000 1'b1;
	node_C[11] = #980000 1'b0;
end 
// node_C[ 10 ]
initial
begin
	node_C[10] = 1'b0;
	node_C[10] = #10000 1'b1;
	node_C[10] = #980000 1'b0;
end 
// node_C[ 9 ]
initial
begin
	node_C[9] = 1'b0;
	node_C[9] = #10000 1'b1;
	node_C[9] = #980000 1'b0;
end 
// node_C[ 8 ]
initial
begin
	node_C[8] = 1'b0;
	node_C[8] = #10000 1'b1;
	node_C[8] = #980000 1'b0;
end 
// node_C[ 7 ]
initial
begin
	node_C[7] = 1'b0;
end 
// node_C[ 6 ]
initial
begin
	node_C[6] = 1'b0;
end 
// node_C[ 5 ]
initial
begin
	node_C[5] = 1'b0;
end 
// node_C[ 4 ]
initial
begin
	node_C[4] = 1'b0;
end 
// node_C[ 3 ]
initial
begin
	node_C[3] = 1'b0;
	node_C[3] = #10000 1'b1;
	node_C[3] = #980000 1'b0;
end 
// node_C[ 2 ]
initial
begin
	node_C[2] = 1'b0;
end 
// node_C[ 1 ]
initial
begin
	node_C[1] = 1'b0;
end 
// node_C[ 0 ]
initial
begin
	node_C[0] = 1'b0;
end 

busSimulator_vlg_sample_tst tb_sample (
	.node_A(node_A),
	.node_B(node_B),
	.node_C(node_C),
	.sampler_tx(sampler)
);

busSimulator_vlg_check_tst tb_out(
	.OUTPUT(OUTPUT),
	.sampler_rx(sampler)
);
endmodule

